AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-lambda

  WCIVF Template for aws-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 299

Parameters:

  AppDjangoSettingsModule:
    Description: "The DJANGO_SETTINGS_MODULE environment variable passed to the app."
    Type: String

  AppRdsHost:
    Description: "The RDS_HOST environment variable passed to the app."
    Type: String

  AppRdsDbName:
    Description: "The RDS_DB_NAME environment variable passed to the app."
    Type: String

  AppRdsDbPassword:
    Description: "The DB_PASSWORD environment variable passed to the app."
    Type: String

  AppSentryDsn:
    Description: "The SENTRY_DSN environment variable passed to the app."
    Type: String

  AppSecretKey:
    Description: "The django SECRET_KEY environment variable passed to the app."
    Type: String

  AppDcEnvironment:
    Description: "The DC_ENVIRONMENT environment variable passed to the app."
    Type: String

  VpcIdParameter:
    Description: "VPC ID"
    Type: String

  SubnetIdsParameter:
    Description: "List of subnet IDs"
    Type: CommaDelimitedList

  SSLCertificateArn:
    Description: "SSL Certificate ARN"
    Type: String

  InstanceType:
    Description: "The instance type to be used"
    Type: String

  Domain:
    Description: "The domain to be used"
    Type: String

  AppSlackFeedbackWebhookUrl:
    Description: "Webhook url used to send feeback entries to Slack"
    Type: String

Resources:
  WCIVFControllerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: WCIVFControllerFunction
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/WCIVFLambdaExecutionRole"
      CodeUri: .
      Handler: wcivf.lambda_handler.handler
      MemorySize: 256
      Runtime: python3.6
      Environment:
        Variables:
          DJANGO_SETTINGS_MODULE: !Ref AppDjangoSettingsModule
          RDS_HOST: !Ref AppRdsHost
          RDS_DB_NAME: !Ref AppRdsDbName
          RDS_DB_PASSWORD: !Ref AppRdsDbPassword
          SENTRY_DSN: !Ref AppSentryDsn
          SECRET_KEY: !Ref AppSecretKey
          DC_ENVIRONMENT: !Ref AppDcEnvironment
          SLACK_FEEDBACK_WEBHOOK_URL: !Ref AppSlackFeedbackWebhookUrl
      Tags:
        dc-environment: !Ref AppDcEnvironment
        dc-product: wcivf
        CreatedVia: CloudFormation
      Events:
        ImportPeopleRecentlyUpdated:
          Type: Schedule # More info about API Event Source: https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: rate(5 minutes)
            Name: import-people-recently-updated
            Description: Update all people updated in YNR recently
            Input: '{"command": "import_people", "args": ["--recently-updated"]}'
        DeleteDeletedPeople:
          Type: Schedule # More info about API Event Source: https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: rate(1 hour)
            Name: delete-deleted-people
            Description: Deletes people deleted in YNR in the last hour
            Input: '{"command": "delete_deleted_people"}'
        ImportBallotsRecentlyUpdated:
          Type: Schedule # More info about API Event Source: https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: rate(5 minutes)
            Name: import-ballots-recently-updated
            Description: Update all ballots updated in YNR recently
            Input: '{"command": "import_ballots", "args": ["--recently-updated"]}'
        ImportParties:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: import-parties
            Description: Import parties
            Input: '{"command": "import_parties"}'
        BatchFeedbackToSlack:
          Type: Schedule
          Properties:
            Schedule: cron(0 9 ? * 6 *)
            Name: batch-feedback-to-slack
            Description: Send feedback entries for the last week to slack
            Input: '{"command": "batch_feedback_to_slack", "args": ["--hours=168"]}'

  WCIVFCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: WCIVFCodeDeploy
      ComputePlatform: Server
      # cannot apply tags without recreating - applied in console

  ElbHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'HTTP traffic'
      GroupName: 'Elb Security Group'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VpcIdParameter
      Tags:
        - Key: dc-environment
          Value: !Ref AppDcEnvironment
        - Key: dc-product
          Value: wcivf
        - Key: CreatedVia
          Value: CloudFormation

  InstanceHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP and HTTPS access for an instance from the ALB security group'
      GroupName: 'InstanceHTTPSecurityGroup'
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ElbHTTPSecurityGroup
          ToPort: 80
        - FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ElbHTTPSecurityGroup
          ToPort: 443
      VpcId: !Ref VpcIdParameter
      Tags:
        - Key: dc-environment
          Value: !Ref AppDcEnvironment
        - Key: dc-product
          Value: wcivf
        - Key: CreatedVia
          Value: CloudFormation

  WCIVFTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/_status_check/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      TargetType: "instance"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 2
      VpcId: !Ref VpcIdParameter
      Name: "wcivf-alb-tg"
      HealthCheckEnabled: true
      Tags:
        - Key: dc-environment
          Value: !Ref AppDcEnvironment
        - Key: dc-product
          Value: wcivf
        - Key: CreatedVia
          Value: CloudFormation

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "wcivf-alb"
      Scheme: "internet-facing"
      Type: "application"
      SecurityGroups:
        - !Ref ElbHTTPSecurityGroup
      IpAddressType: "ipv4"
      Subnets: !Ref SubnetIdsParameter
      Tags:
        - Key: dc-environment
          Value: !Ref AppDcEnvironment
        - Key: dc-product
          Value: wcivf
        - Key: CreatedVia
          Value: CloudFormation


  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref WCIVFTargetGroup
          Type: "forward"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  HTTPWWWredirect:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Conditions:
        - Field: "host-header"
          HostHeaderConfig:
            Values:
              - !Sub "www.${Domain}"
      Actions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: !Ref Domain
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

      ListenerArn: !Ref HTTPListener
      Priority: 1

  HTTPSWWWredirect:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Conditions:
        - Field: "host-header"
          HostHeaderConfig:
            Values:
              - !Sub "www.${Domain}"
      Actions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: !Ref Domain
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

      ListenerArn: !Ref HTTPSListener
      Priority: 2

  WCIVFLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: wcivf
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 35
              VolumeType: gp2
              DeleteOnTermination: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref InstanceHTTPSecurityGroup
        # This is needed as it has permissions needed for the instance
        # TODO create new role without packer permissions
        IamInstanceProfile:
          Name: 'CodeDeploy-EC2-Instance-Profile'
        ImageId: 'ami-08e5184df40ad86ba' # AMI number
        InstanceType: !Ref InstanceType
        UserData: |
          I2Nsb3VkLWNvbmZpZwp1c2VyczoKICAtIG5hbWU6IGFzaAogICAgc3VkbzogQUxMPShBTEwpIE5P
          UEFTU1dEOkFMTAogICAgc2hlbGw6IC9iaW4vYmFzaAogICAgc3NoLWF1dGhvcml6ZWQta2V5czoK
          ICAgICAgLSAic3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUdXL25hUk1zSUEy
          RWxwQW5TSHhUeXZvMFBlc2tjbWt0Y0wwVTFzMkNSa0ogYXNoQGRlbW9jbHViLWp1bmUyMDE2Igog
          IC0gbmFtZTogc3ltCiAgICBzdWRvOiBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMCiAgICBzaGVsbDog
          L2Jpbi9iYXNoCiAgICBzc2gtYXV0aG9yaXplZC1rZXlzOgogICAgICAtICJzc2gtcnNhIEFBQUFC
          M056YUMxeWMyRUFBQUFEQVFBQkFBQUJBUUM4QkxNOUxKVkFkR0ZRWVVlTXZaNTZMbDNzV1VvUHAz
          cCsxenZJYXFnNzN0bjQ3MGZUZ2lRNk1PUy9jS2piWnFjTjI0MkgxSWgrb1VEQWtiTWt5MmtzLzlI
          YXhBZ3hIc1lvUkJjU21lYWZxNngwSkxob203Mmo1TEMyekNoTWV5R0xwdC82T2ZhY1BQTDhQZFpz
          VzlWL3NDelNRVUQ3QUljKy9iZ3FwVEluL1hmcFRUTU5VWmk4cWtvRE1yNTNUZ1pocTcwcDVaWnAy
          ejBJVVNna1o1TEVMeGxPa2hUUndBNlNoWWQxRVdGc3ZMZGR6ZTJ2UVVDWmZTV2VjVm9WZWpCUko2
          amFPVGVjUDg2NlhTY2lRdTZwb2FiMGJyRkNtM2swMzc3VU1salhZV0NxczY1M3hnSzF4eXJPMmV6
          aGljeUt4c3poNzdxZklyVE1RZEdMK3dZeiBzeW1yb2VAU3ltcy1NYWNCb29rLVByby5sb2NhbCIK
          ICAtIG5hbWU6IGNocmlzCiAgICBzdWRvOiBBTEw9KEFMTCkgTk9QQVNTV0Q6QUxMCiAgICBzaGVs
          bDogL2Jpbi9iYXNoCiAgICBzc2gtYXV0aG9yaXplZC1rZXlzOgogICAgICAtICJzc2gtcnNhIEFB
          QUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUJBUURQNzAwVmpiblRJd1JuT2VtdGNKSkdQcjBQZ3E4
          Z093aFI0U1ZCUi81MFJWR2RkWDdKdzlYcVc4d01ObUk5M3haUFY1WVI1SmZNbG52YU1mQWdIRDF6
          ZFNCUHMxbGJ4OE1aYWhiVmdCUVRpckxhSG9yamdselVYVEJ6TG5ub3BDOERWdDRJd0Z1aDN2Ujcx
          K3JWbjN2dW04L2ZKQUk3SVNkQmRrY0R4SGt2NHpJYTNJK3NRMjJZbWZsbnpwSkEvbDFBN1dKWVRR
          VWpMaURFbGlqV0hId01Rdjg2U0JweHNITjN1M25FeWF5bHJJTkRJM0w0RlRUbkJXWCtmRi9IeGFv
          Ym45OHhpQ2FzOEhvOEVjbXZ5L1piUCtHUzdmSmVLWm1RQ20wUk9TQ0oxTGRBQXlkcHJBZll3TUc4
          dlBudXQzZk83LzhNeHlUMFBiWWlpRzRJOXo3UCBjaHJpc0BsZW9uYXJkIgogIC0gbmFtZTogbWlj
          aGFlbAogICAgc3VkbzogQUxMPShBTEwpIE5PUEFTU1dEOkFMTAogICAgc2hlbGw6IC9iaW4vYmFz
          aAogICAgc3NoLWF1dGhvcml6ZWQta2V5czoKICAgICAgLSAic3NoLWVkMjU1MTkgQUFBQUMzTnph
          QzFsWkRJMU5URTVBQUFBSUxHenpBM1hIK1JNcUVlOGpEbnovVHZmRGRpY2QxdDJvQmVSUDBDQWV1
          Q1kgbWljaGFlbEBtYWNib29rcHJvMjAyMSIK
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: dc-environment
              Value: !Ref AppDcEnvironment
            - Key: dc-product
              Value: wcivf
            - Key: CreatedVia
              Value: CloudFormation

Outputs:
  WCIVFControllerFunctionArn:
    Description: "WCIVF Controller Lambda Function ARN"
    Value: !GetAtt WCIVFControllerFunction.Arn
